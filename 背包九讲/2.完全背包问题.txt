Q:有N种物品和一个容量为V的背包，物品都有无限件可用。放入第i种物品的费用为Ci，价值是Wi。求解：将哪些物品放入背包中，可以让这些物品的耗费的费用总和不超过背包容量，且价值总和最大。

A：每种物品可以取0，1，2......[V/Ci]件。 F[i,v]表示前i种物品恰放入一个容量为v的背包的最大权值。
状态转移方程：F[i,v] = max{F[i-1,v-kCi]+kWi  |  0<=kCi <=v  }

复杂度分析：
同0，1背包，有O(VN)个状态需要求解，但求解每个状态的时间已经不是常数，求解状态F[i,v]的时间是O(v/Ci)，所以总的时间复杂度可以认为是O(NV*{求和[V/Ci]})

改进完全背包的复杂度：
若两件物品i，j满足  Ci<=Cj 且 Wi >=Wj，则考虑将物品j直接去掉，不用考虑。
首先将费用大于V的物品去掉，然后使用类似计数排序的做法，计算出费用相同的物品种价值最高的是哪个，可以O(V+N)地完成这个优化。 


转化为01背包问题求解：(将完全背包转化为01背包问题)
考虑到第i种物品最多选择[V/Ci]件，于是可以把第i种物品转化为[V/Ci]件费用及其价值均不变的物品。
更高效的转化方法：把第i种物品拆成费用为Ci*2^k,价值为Wi*2^k的若干件物品，其中k取遍满足Ci*2^k<=V的非负整数。
搞笑转化方法：二进制的思想   不管最优策略选几件第i种物品，其件数写成二进制后，总是可以表示成若干个2^k件物品的和。这样，可以把物品拆成O(log[V/Ci])件物品。

O(VN)的算法：
01背包要求v递减：保证第i次循环中的状态F[i,v] 是由状态F[i-1,v-Ci] 递推而来。换句话说，这正是为了保证每件物品只选一次，保证在考虑“选入第i件物品”这件策略时，依据的是一个绝无已经选入第i件物品的子结果F[i-1,v-Ci]  
完全背包的特点恰是每种物品可选无限件，所以在考虑“加选一件第i种物品”这种策略时，却正需要一个可能已经选入第i种物品的子结果F[i,v-Ci]   所以就可以并且必须采用v递增的顺序循环。

二维状态转移方程：F[i,v]  =  max{ F[i-1,v],F[i,v-Ci]+Wi }




